// Diese Datei in den Ordner /api Ihres Projekts legen
export default async function handler(req, res) {
    // CORS-Header f√ºr lokale Entwicklung
    res.setHeader('Access-Control-Allow-Credentials', true);
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,POST');
    res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');
  
    // Handle preflight requests
    if (req.method === 'OPTIONS') {
      res.status(200).end();
      return;
    }
  
    // Nur POST-Anfragen akzeptieren
    if (req.method !== 'POST') {
      res.status(405).json({ error: 'Methode nicht erlaubt' });
      return;
    }
  
    try {
      const formData = req.body;
  
      if (!formData) {
        res.status(400).json({ error: 'Keine Formulardaten √ºbermittelt' });
        return;
      }
  
      // Der gew√ºnschte Prompt mit den vorhandenen Platzhaltern
      const prompt = `Erstelle einen physiotherapeutischen Abschlussbericht basierend auf den folgenden Eingaben:
  ‚Ä¢ **Therapieziel:** ${formData.goalText || "Nicht angegeben"}
  ‚Ä¢ **Hypothese:** ${formData.hypothesisText || "Nicht angegeben"}
  ${formData.goal === 'nicht_erreicht' ? `‚Ä¢ **Begr√ºndung f√ºr Nicht-Erreichung:** ${formData.reasonText || "Nicht angegeben"}` : ''}
  ‚Ä¢ **Therapieverlauf:**
  ‚Ä¢ **Therapieziel:** ${formData.goal === 'erreicht' ? 'erreicht üü¢' : 'nicht erreicht üî¥'}
  ${formData.goal === 'nicht_erreicht' ? `‚Ä¢ **Compliance:** ${formData.compliance === 'ja' ? 'Gut üü¢' : 'Unzureichend üî¥'}
  ‚Ä¢ **Ursache:** ${formData.reasonText || "Nicht angegeben"}` : ''}
  
  Formuliere einen kurzen Bericht, der genau folgendem Muster entspricht. Halte deine Antwort extrem kurz, objektiv und auf einen einzigen Satz beschr√§nkt. Beziehe dich konkret auf die genannten Erkenntnisse und mache eine einzige klare Empfehlung.
  
  **Beispiel:**
  Eingaben:
  ‚Ä¢ **Therapieziel:** Wiederaufnahme Fahrradfahren
  ‚Ä¢ **Hypothese:** Degenerative Ver√§nderungen im Kniegelenk mit Schmerzen und Bewegungseinschr√§nkungen
  ‚Ä¢ **Begr√ºndung f√ºr Nicht-Erreichung:** Patient hat zus√§tzliche Erkrankung, die ihn an der Therapie hindert
  ‚Ä¢ **Therapieverlauf:**
  ‚Ä¢ **Therapieziel:** nicht erreicht üî¥
  ‚Ä¢ **Compliance:** Unzureichend üî¥
  ‚Ä¢ **Ursache:** Mangelnde Motivation, Faulheit
  
  **Erwartetes Resultat:**
  Der Patient hat das Therapieziel nicht erreicht aufgrund mangelnder Motivation und zus√§tzlicher Erkrankungen; eine weitere medizinische Abkl√§rung sowie motivierende Gespr√§chsf√ºhrung zur Steigerung der Therapiebereitschaft wird empfohlen.`;
  
      // OpenAI API-Aufruf mit API-Schl√ºssel aus Umgebungsvariablen
      const OPENAI_API_KEY = process.env.OPEN_API_KEY;
      
      if (!OPENAI_API_KEY) {
        throw new Error('OpenAI API-Schl√ºssel nicht konfiguriert');
      }
  
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo", // G√ºnstigeres Modell
          messages: [
            {
              role: "system",
              content: "Du bist ein pr√§ziser physiotherapeutischer Assistent, der professionelle Abschlussberichte verfasst. Halte deine Antwort extrem kurz, objektiv und auf einen einzigen Satz beschr√§nkt. Beziehe dich konkret auf die genannten Erkenntnisse und mache eine einzige klare Empfehlung."
            },
            {
              role: "user",
              content: prompt
            }
          ],
          temperature: 0.3, // Niedrigere Temperatur f√ºr konsistentere Antworten
          max_tokens: 150   // Begrenzt die Antwortl√§nge
        })
      });
  
      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error.message || 'OpenAI API-Fehler');
      }
  
      // Formatierung f√ºr die Anzeige
      let finalResponse = '';
  
      // Erste Zeilen (Therapieziel und Hypothese)
      finalResponse += `Therapieziel: ${formData.goalText || "Nicht angegeben"}\n`;
      finalResponse += `Hypothese: ${formData.hypothesisText || "Nicht angegeben"}\n\n`;
      
      // Therapieverlauf-Abschnitt
      finalResponse += `Therapieverlauf:\n`;
      finalResponse += `- ${formData.goal === 'erreicht' ? 'üü¢ Therapieziel erreicht' : 'üî¥ Therapieziel nicht erreicht'}\n`;
      
      if (formData.goal === 'nicht_erreicht') {
        finalResponse += `- Compliance: ${formData.compliance === 'ja' ? 'üü¢ Gut' : 'üî¥ Unzureichend'}\n`;
        finalResponse += `- Ursache: ${formData.reasonText || "Nicht angegeben"}\n`;
      }
      
      // F√ºge die Empfehlung als letzten Abschnitt hinzu
      finalResponse += `\nEmpfehlung: ${data.choices[0].message.content.trim()}`;
  
      res.status(200).json({ 
        result: finalResponse
      });
      
    } catch (error) {
      console.error('Fehler bei der Verarbeitung der Anfrage:', error);
      res.status(500).json({ error: error.message || 'Interner Serverfehler' });
    }
  }